{"id":496341829,"question_id":61,"lang":"cpp","lang_name":"C++","time":"3 years, 1 month","timestamp":1621620145,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/496341829/","is_pending":"Not Pending","title":"Rotate List","memory":"11.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int get_size(ListNode* head){\n        int c=0;\n         ListNode* current=head;\n        while(current!=nullptr){\n           current=current->next;\n            c++;\n        }return c;\n    }\n     ListNode* rotate(ListNode* head, int k){\n         if(k==0 ||head==nullptr ||head->next==nullptr)\n             return head;\n        ListNode* current=head,*end;\n        while(current->next->next!=nullptr){\n           current=current->next;\n        }end=current->next;\n        end->next=head;\n        current->next=nullptr;\n        head=end;\n        return rotate(head,k-1);\n         \n     }\n    ListNode* rotateRight(ListNode* head, int k) {\n              int size=get_size(head);\n                if(size==0 || size==1)\n                    return head;\n                else\n                    return rotate(head,k%size);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false,"flag_type":1}