{"id":1258693366,"question_id":2914,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1715776807,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1258693366/","is_pending":"Not Pending","title":"Find the Safest Path in a Grid","memory":"N/A","code":"class Solution {\npublic:\n    int Manhattan_distance(int n ,int x,int y){\n        return abs(n - 1 - x) + abs(n - 1 - y);\n    }\n    int maximumSafenessFactor(vector<vector<int>>& grid) {\n        int n = grid.size(),i=0,j=0;\n        map<pair<int,int>,int> path;\n        bool reached = false;\n        if(grid[0][0] == 1 || grid[n-1][n-1] == 1) {\n            return 0;\n        }\n        int tempDist=10*n;\n        \n        while(!reached){\n            if(!grid[i+1][j]){if(tempDist<Manhattan_distance(n,i+1,j)){tempDist=Manhattan_distance(n,i+1,j);temp={i+1,j};i++;}}\n            if(i-1 >= 0 && !grid[i-1][j]){if(tempDist < Manhattan_distance(n,i-1,j)){temp={i-1,j};i--;}}\n            if(!grid[i][j+1]){if(tempDist < Manhattan_distance(n,i,j+1)){tempDist = Manhattan_distance(n,i,j+1);temp={i,j+1};j++;}}\n            if(j-1 >= 0 && !grid[i][j-1]){if(tempDist<Manhattan_distance(n,i,j-1)){tempDist=Manhattan_distance(n,i,j-1);temp={i,j-1};j--;}}\n            path[std::make_pair(temp.first,temp.second)] = tempDist;\n            cout<<temp.first<<\" , \"<<temp.second<<tempDist <<endl;\n            if(temp.first == n-1 && temp.second == n-1){\n                reached = true;\n            }\n        }\n        return 2;\n    }\n};","compare_result":null,"title_slug":"find-the-safest-path-in-a-grid","has_notes":false,"flag_type":1}