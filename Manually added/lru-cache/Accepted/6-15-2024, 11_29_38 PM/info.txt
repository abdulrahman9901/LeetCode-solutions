{"id":1289424054,"question_id":146,"lang":"cpp","lang_name":"C++","time":"2 weeks, 6 days","timestamp":1718483378,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1289424054/","is_pending":"Not Pending","title":"LRU Cache","memory":"167.8 MB","code":"class Node {\n    public:\n    int key ;\n    int value ;\n    Node * next;\n    Node * prev;\n\n    Node(int key , int value , Node * next = nullptr,Node * prev = nullptr){\n        this->key = key;\n        this->value = value;\n        this->next = next;\n        this->prev = prev;\n    }\n  \n};\nclass LRUCache {\n    Node * tail;\n    Node * head;\n    int capacity;\n    map<int ,Node*> cache;\n\n    void moveToHead(Node * node){\n        if(node == nullptr || node == head)\n            return;\n        if (node == tail && tail != nullptr){\n            tail=tail->prev;\n        }\n        if(node->next){\n            node->next->prev =  node->prev;\n        }\n        if(node->prev){\n            node->prev->next =  node->next;\n        }\n        if(head !=nullptr){\n            head->prev =  node;\n        }\n        if(tail == nullptr){\n            tail = node;\n        }\n        node->next =  head; \n        node->prev =  nullptr;\n        head = node;\n    }\npublic:\n    LRUCache(int capacity) {\n        this->capacity = capacity;\n        this->head = nullptr;\n        this->tail = nullptr;\n    }\n    int get(int key) {\n        moveToHead(cache[key]);\n        return (cache.find(key)!=cache.end()) && cache[key] ? cache[key]->value : -1;\n    }\n    \n    void put(int key, int value) {\n        Node* temp;\n         if(cache.find(key)!=cache.end() && cache[key] ){\n            temp = cache[key];\n            temp->value = value;          \n        }else if(capacity > 0){\n            temp = new Node (key,value);\n            capacity--;\n        }else {\n            temp = tail;\n            cache.erase(temp->key);\n            temp->key = key ;\n            temp->value = value ;\n        }\n        moveToHead(temp);\n        cache[key]=temp;\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}