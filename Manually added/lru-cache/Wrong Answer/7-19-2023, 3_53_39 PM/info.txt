{"id":998453837,"question_id":146,"lang":"cpp","lang_name":"C++","time":"11 months, 3 weeks","timestamp":1689771219,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/998453837/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache {\n    map<int, pair<int, int> > cache;\n    int cap = 0 ;\n    bool used[10001] = {false};\n    int timestamp = 0;\npublic:\n    LRUCache(int capacity) {\n        cap = capacity;\n    }\n    \n    int get(int key) {\n        if(used[key]){\n            cache[key].second = timestamp ;\n            timestamp++;\n            cout << \"get\" << ' ' << key << \" \" << cache[key].first  << \" \" << cache[key].second  <<endl;\n            return cache[key].first;\n        }else \n            return -1;\n    }\n    \n    void put(int key, int value) {\n        if(cap !=0 ){\n            cache[key] = pair<int,int>(value,timestamp);\n            cout << \"cap\" << ' ' << key << \" \" << value << \" \" << timestamp <<endl;\n            cap--;\n        }else {\n        if(used[key]) {\n            cache[key] = pair<int,int>(value,timestamp); \n        }else {\n        auto it = std::min_element(cache.begin(), cache.end(),\n            [](const auto& l, const auto& r) { return l.second.second < r.second.second; });\n\n        used[it->first] = false;\n        cache.erase(it);\n\n        cache[key] = pair<int,int>(value,timestamp);\n        }\n        }\n        timestamp++;\n        used[key] = true; \n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"1111111111111100000000","title_slug":"lru-cache","has_notes":false,"flag_type":1}