{"id":1308854017,"question_id":297,"lang":"cpp","lang_name":"C++","time":"2 days, 5 hours","timestamp":1720059476,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1308854017/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        string str ;\n        if(root == nullptr)\n            return \"null\";\n        else \n            str = to_string(root->val);\n\n        return str +\",\"+serialize(root->left)+\",\"+ serialize(root->right);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        vector<TreeNode*> nodes;\n        stringstream sstream(data);\n        string tmp;\n        TreeNode* tempNode ;\n        char delim = ',';\n\n        cout<<data<<endl;\n\n        while(std::getline(sstream, tmp, delim)) {\n            tempNode = nullptr;\n            if(tmp != \"null\")\n                tempNode = new TreeNode(stoi(tmp));\n            nodes.push_back(tempNode);     \n            }\n        for(int i = 0 ; i < nodes.size() ; ++i){\n            if(!nodes[i])\n                continue;\n\n            nodes[i]->left = nodes[i+1];\n            \n            int childs = 0;\n\n            while(nodes[i+childs+1] != nullptr){\n                childs++;\n            }\n            if(nodes[i+1] != nullptr){\n                nodes[i]->right = nodes[i+4 * childs];\n            }else{\n                nodes[i]->right = nodes[i+2];\n            }     \n        }\n\n        return nodes[0];\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));","compare_result":"11111111111011100101111111101110110000000000000000000","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}