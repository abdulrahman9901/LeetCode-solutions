{"id":1294948397,"question_id":572,"lang":"cpp","lang_name":"C++","time":"2 weeks, 1 day","timestamp":1718911360,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1294948397/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"27.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    bool foundSub(TreeNode* root, TreeNode* subRoot){\n        if(root == nullptr && subRoot == nullptr){\n            return true;\n        }else if(root == nullptr || subRoot == nullptr){\n            return false;\n        }else{\n            if(root->val == subRoot->val)\n                return foundSub(root->left,subRoot->left) && foundSub(root->right,subRoot->right);\n            else \n                return false;\n        }\n    } \npublic:\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        bool f = false;\n        if(subRoot && root){\n            if(root->val == subRoot->val){\n                f = foundSub(root,subRoot);\n            } \n            return f || isSubtree(root->left,subRoot) || isSubtree(root->right,subRoot);\n        }else\n            return false;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false,"flag_type":1}