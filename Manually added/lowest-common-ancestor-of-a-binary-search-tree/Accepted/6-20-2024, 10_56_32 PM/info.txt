{"id":1294972593,"question_id":235,"lang":"cpp","lang_name":"C++","time":"2 weeks, 1 day","timestamp":1718913392,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/1294972593/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"21.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(root == nullptr)\n            return root;\n        else if((p->val >= root->val && q->val <= root->val)\n            || (q->val >= root->val && p->val <= root->val) )\n            return root;\n        else {\n            auto temp =lowestCommonAncestor(root->left,p,q);\n            if(!temp)\n                temp = lowestCommonAncestor(root->right,p,q); \n            return temp;\n        }\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}