{"id":1279813243,"question_id":907,"lang":"cpp","lang_name":"C++","time":"4 weeks, 1 day","timestamp":1717696792,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1279813243/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"N/A","code":"class Solution {\npublic:\n    int minEatingSpeed(vector<int>& piles, int h) {\n        int maxVal = *max_element(piles.begin(), piles.end());\n        int left = 1 , right = maxVal , k , th=0 , res = maxVal;\n        while(left <= right){\n            th = 0 ;\n            k = (right + left)/2;\n            for(auto pile:piles){\n                th+=ceil(double(pile)/k);\n            }\n            cout<<k<<\" : \"<<th<<\" >> \"<<left <<\":\"<< right<<endl;\n            if(th > h){\n                left = k + 1;\n            }else if(th <= h) {\n                res = min(res,k);\n                right = k - 1; \n            }\n        }  \n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1}