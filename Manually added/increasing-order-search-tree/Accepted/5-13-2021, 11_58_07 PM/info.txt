{"id":492793177,"question_id":933,"lang":"cpp","lang_name":"C++","time":"3 years, 1 month","timestamp":1620943087,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/492793177/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"11.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:   \n    vector<int> v;\n    void in_order(TreeNode* root){\n        if(root!=nullptr){\n            increasingBST(root->left);\n            v.push_back(root->val);\n            increasingBST(root->right);\n        }\n    }\n    TreeNode* increasingBST(TreeNode* root) {\n        in_order(root);\n        if(v.size()!=0){\n        TreeNode* newroot=new TreeNode(v[0]);\n        TreeNode* temp=newroot;\n            for(int i=1;i<v.size();++i){\n                temp->right=new TreeNode(v[i]);\n                temp=temp->right;\n            }\n            return newroot;\n        }\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"increasing-order-search-tree","has_notes":false,"flag_type":1}