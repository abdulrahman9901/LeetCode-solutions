{"id":492839351,"question_id":1498,"lang":"cpp","lang_name":"C++","time":"3 years, 1 month","timestamp":1620955289,"status":10,"status_display":"Accepted","runtime":"572 ms","url":"/submissions/detail/492839351/","is_pending":"Not Pending","title":"Find a Corresponding Node of a Binary Tree in a Clone of That Tree","memory":"199.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    /*struct node{\n        int val;\n        TreeNode* ref;\n        node(int x,TreeNode* ref):val(x),ref(ref){}\n    };\n    vector<node>v;\n    void in_order(TreeNode* root){\n        if(root!=nullptr){\n            in_order(root->left);                \n            v.push_back(node(root->val,root));\n            in_order(root->right);\n        }\n    }*/\n    map<int,TreeNode*>m;\n    void in_order(TreeNode* root){\n        if(root!=nullptr){\n            in_order(root->left);                \n            m.emplace(root->val,root);\n            in_order(root->right);\n        }\n    }\n    TreeNode* getTargetCopy(TreeNode* original, TreeNode* cloned, TreeNode* target) {\n        TreeNode* res=nullptr;\n        in_order(cloned);\n        /*for(int i=0;i<v.size();++i){\n            if(v[i].val==target->val)\n                res=v[i].ref;\n        }*/\n            return m[target->val];\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree","has_notes":false,"flag_type":1}