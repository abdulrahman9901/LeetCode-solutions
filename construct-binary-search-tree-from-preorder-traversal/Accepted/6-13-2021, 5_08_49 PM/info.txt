{"id":507356034,"question_id":1050,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1623596929,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/507356034/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"12.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void addNode(int x,TreeNode* &root){\n        if(root==nullptr){\n            root=new TreeNode(x);\n        }\n        else{\n        TreeNode* current=root,*prev=root;\n        while(current!=nullptr){\n            if(x > current->val){\n                prev=current;\n                current=current->right;\n                if(!current){\n                    prev->right=new TreeNode(x);\n                    break;\n                }\n            }\n            else{\n                 prev=current;\n                 current=current->left;\n                if(!current){\n                    prev->left=new TreeNode(x);\n                    break;\n                }\n            }\n            }\n        }\n    }\n    TreeNode* bstFromPreorder(vector<int>& preorder) {\n            TreeNode* root;\n        for(int i=0;i<preorder.size();++i){\n            addNode(preorder[i],root);\n        }\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}