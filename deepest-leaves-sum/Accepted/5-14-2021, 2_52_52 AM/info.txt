{"id":492832585,"question_id":1254,"lang":"cpp","lang_name":"C++","time":"3 years, 1 month","timestamp":1620953572,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/492832585/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"38.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    /*struct node{\n        int val;\n        int level;\n        node(int val,int lvl):val(val),level(lvl){}\n    }\n    vector<node>v;\n    */\n    map<int,int>m;\n    void dfs(TreeNode* root,int lvl){\n        if(root!=nullptr){\n            //v.push_back(node(root->val,lvl));\n            m[lvl]+=root->val;\n            dfs(root->left,lvl+1);\n            dfs(root->right,lvl+1);\n        }\n    }\n    int deepestLeavesSum(TreeNode* root) {\n        dfs(root,0);\n        if(m.size()!=0)\n            return m[m.size()-1];\n        return 0;\n    }\n};","compare_result":"111111111111111","title_slug":"deepest-leaves-sum","has_notes":false,"flag_type":1}