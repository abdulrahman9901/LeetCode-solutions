{"id":498583641,"question_id":1040,"lang":"cpp","lang_name":"C++","time":"3 years, 1 month","timestamp":1622042448,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/498583641/","is_pending":"Not Pending","title":"Maximum Binary Tree II","memory":"13.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n     int maximum(vector<int>& arr, int st, int end) {\n        int max = arr[st], indx = st;\n        for (int i = st + 1; i < end; ++i) {\n            if (arr[i] > max) {\n                max = arr[i];\n                indx = i;\n            }\n        }\n        return indx;\n    }\n    void build_tree(vector<int>& nums, TreeNode* &root, int st, int ed) {\n        if (st >= ed)\n            return;\n\n        int mx = maximum(nums, st, ed);\n        root = new TreeNode(nums[mx]);\n        build_tree(nums, root->left, st, mx);\n        build_tree(nums, root->right, mx + 1, ed);\n    }\n    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {\n        TreeNode* root=nullptr;\n        build_tree(nums, root, 0, nums.size());\n        return root;\n    }\n    void inorder(TreeNode* root,vector<int>&v){\n        if(root==nullptr)\n            return;\n        inorder(root->left,v);\n        v.push_back(root->val);\n        inorder(root->right,v);\n    }\n    TreeNode* insertIntoMaxTree(TreeNode* root, int val) {\n        vector<int> nums;\n        inorder(root,nums);\n        nums.push_back(val);\n        return constructMaximumBinaryTree(nums);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree-ii","has_notes":false,"flag_type":1}